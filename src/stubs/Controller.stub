<?php

namespace {{ControllerNamespace}};

use {{EntityNamespace}}\{{ServiceClass}} as {{UnitName}}Service;
use {{ControllerNamespace}}\Transformer as {{UnitName}}Transformer;
use {{SearchNamespace}}\Search;
use \Illuminate\Http\Response;

class {{ControllerClass}} extends \App\Http\Controllers\Controller
{
    private ${{CamelUnitName}}Service;
    private ${{CamelUnitName}}Transformer;


    public function __construct()
    {
        $this->{{CamelUnitName}}Service = new {{UnitName}}Service();
        $this->{{CamelUnitName}}Transformer = new {{UnitName}}Transformer();
    }

    /**
     * Display a listing of the resource.
     *
     * @param {{RequestClass}} $request
     * @return Response
     */
    public function index({{RequestClass}} $request)
    {
        try {
            $response = $this->responseMaker(201, null, null);
        } catch (\Exception $e) {
            $response = $this->responseMaker(501, $e->getMessage(), null);
        }
        return $response;
    }

    /**
     * Store a newly created resource in storage.
     *
     *  @param {{RequestClass}} $request
     * @return Response
     */
    public function store({{RequestClass}} $request)
    {
        try {
            $response = $this->responseMaker(101, null, null);
        } catch (\Exception $e) {
            $response = $this->responseMaker(501, $e->getMessage(), null);
        }
        return $response;
    }

    /**
     * Update the specified resource in storage.
     *
     *  @param {{RequestClass}} $request
     * @return Response
     */
    public function update({{RequestClass}} $request)
    {
        try {
            $response = $this->responseMaker(301, null, null);
        } catch (\Exception $e) {
            $response = $this->responseMaker(501, $e->getMessage(), null);
        }
        return $response;
    }

    /**
     * Remove the specified resource from storage.
     *
     *  @param {{RequestClass}} $request
     * @return Response
     */
    public function destroy({{RequestClass}} $request)
    {
        try {
            $response = $this->responseMaker(401, null, null);
        } catch (\Exception $e) {
            $response = $this->responseMaker(501, $e->getMessage(), null);
        }
        return $response;
    }
}
